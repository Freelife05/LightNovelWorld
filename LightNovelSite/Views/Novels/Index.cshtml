@model IEnumerable<LightNovelSite.Models.Novel>

@{
    ViewData["Title"] = "Novels";
}

<h1>Novels</h1>

<p>
    @if (User.Identity!.IsAuthenticated && User.IsInRole("Admin"))
    {
        <a asp-action="Create" class="btn btn-primary">Create New</a>
    }
</p>

<div class="novel-container">
    @foreach (var item in Model)
    {
        <div class="novel-item">
            <a asp-action="Details" asp-route-id="@item.Id" class="link">
                <div class="image-container">
                    <img src="@item.ImageURL" alt="@item.Title" class="novel-image" />
                    <div class="gloss-effect"></div> <!-- Gloss effect overlay -->
                </div>
            </a>
            <div class="novel-text">
                <div style="text-align: left;">@item.Title</div>
            </div>
            <div class="novel-info">
                <div>@Html.DisplayFor(modelItem => item.Chapters)</div> <!-- Moved the Chapters display here -->
                <div class="actions">
                    @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                    {
                        <button class="btn btn-primary">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="link">Edit</a>
                        </button>
                        <button class="btn btn-primary">
                            <a asp-action="Delete" asp-route-id="@item.Id" class="link">Delete</a>
                        </button>
                        <button class="btn btn-primary">
                            <a asp-action="AddChapter" asp-route-id="@item.Id" class="link">Add Chapter</a>
                        </button>
                    }
                </div>
            </div>
        </div>
    }
</div>

@*
<div class="button-container">
    @if (Model.Any())
    {
        <a class="button" asp-action="PrevNovel" asp-route-id="@Model.First().Title">Prev</a>
        <a class="button" asp-action="NextNovel" asp-route-id="@Model.Last().Title">Next</a>
    }
    else
    {
        <a class="button" asp-action="PrevNovel" asp-route-id="@null">Prev</a>
        <a class="button" asp-action="NextNovel" asp-route-id="@null">Next</a>
    }
</div> *@


@{
    int currentPage = ViewBag.PageNumber;
    int totalPages = ViewBag.TotalPages;

}

<p>
    Page: @(ViewBag.PageNumber+1)</>

    <div class="pagination button-container">
        @if (currentPage > 0)
        {
            <a href="@Url.Action("Catalog", new { page = 0, pageSize = ViewBag.PageSize })" class="button">&laquo; First</a>
            <a href="@Url.Action("Catalog", new { page = currentPage - 1, pageSize = ViewBag.PageSize })" class="button">&lt; Previous</a>
        }

        @for (int i = 0; i < totalPages; i++)
        {
            if (i == currentPage)
            {
                <span class="current button">@(i+1)</span>
            }
            else
            {
                <a href="@Url.Action("Catalog", new { page = i, pageSize = ViewBag.PageSize })" class="button">@(i+1)</a>
            }
        }

        @if (currentPage < totalPages)
        {
            <a href="@Url.Action("Catalog", new { page = currentPage + 1, pageSize = ViewBag.PageSize })" class="button">Next &gt;</a>
            <a href="@Url.Action("Catalog", new { page = totalPages, pageSize = ViewBag.PageSize })" class="button">Last &raquo;</a>
        }
    </div>

    @*     @if (totalPages > 1)
    {
    <div class="pagination">
    @if (currentPage > 0)
    {
    <a href="@Url.Action("Catalog", new { page = 0, pageSize = ViewBag.PageSize })">&laquo; First</a>
    <a href="@Url.Action("Catalog", new { page = currentPage - 1, pageSize = ViewBag.PageSize })">&lt; Previous</a>
    }

    @for (int i = 0; i < totalPages; i++)
    {
    if (i == currentPage)
    {
    <span class="current">@(i+1)</span>
    }
    else
    {
    <a href="@Url.Action("Catalog", new { page = i, pageSize = ViewBag.PageSize })">@(i+1)</a>
    }
    }

    @if (currentPage < totalPages)
    {
    <a href="@Url.Action("Catalog", new { page = currentPage + 1, pageSize = ViewBag.PageSize })">Next &gt;</a>
    <a href="@Url.Action("Catalog", new { page = totalPages, pageSize = ViewBag.PageSize })">Last &raquo;</a>
    }
    </div>
    } *@
    <style>
        .novel-container {
            display: flex;
            flex-wrap: wrap;
            gap: 50px; /* Adjust as needed */
            max-width: 890px;
            margin: 0 auto;
            justify-content: flex-start; /* Align items to the left */
        }

        .novel-item {
            position: relative; /* Positioning for the gloss effect */
            width: calc(20% - 10px); /* Adjust based on your needs */
            height: auto; /* Automatically adjust to content */
            max-height: 500px;
            background-color: #333;
            padding: 10px;
            border-radius: 8px;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            align-items: flex-start; /* Align items to the left */
            margin-bottom: 20px; /* Add margin to create space between items */
            overflow: hidden; /* Hide the gloss effect overflow */
        }

        .novel-text {
            text-align: left;
            color: white; /* Adjust text color */
            margin-bottom: 10px; /* Add margin between text and info */
        }

        .novel-info {
            text-align: left;
            color: white; /* Adjust text color */
        }

        .novel-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px; /* Rounded corners for the image */
        }

        .image-container {
            position: relative;
        }

        .gloss-effect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0));
            opacity: 0;
            border-radius: inherit; /* Use the same border-radius as the image */
            transition: opacity 0.3s ease;
        }

        .image-container:hover .gloss-effect {
            opacity: 1;
        }

        .button-container {
            display: flex; /* Enable flexbox for positioning */
            justify-content: center; /* Horizontally center elements */
        }

        .button { /* Update the selector if needed */
            text-decoration: none;
            color: grey; /* Set the border and text color */
            background-color: transparent; /* Make background transparent */
            border: 2px solid grey; /* Add a visible border */
            padding: 7px 15px;
            border-radius: 5px;
            transition: background-color 0.3s ease; /* Add a smooth color transition */
        }

            .button:hover {
                background-color: grey; /* Fill background on hover */
                color: white; /* Change text color on hover */
            }

        /* Button styles */
        .btn {
            text-decoration: none; /* Remove underline */
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            background-color: #007bff;
            border-radius: 5px;
        }

            .btn:hover {
                background-color: #0056b3;
            }

            /* Link styles */
            .btn .link {
                text-decoration: none; /* Remove underline */
                color: white;
            }
    </style>
