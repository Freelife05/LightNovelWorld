@model IEnumerable<LightNovelSite.Models.Chapter>

@{
    ViewData["Title"] = "Chapters";
}



<h1>Chapters</h1>

<div class="chapter-grid">
    @foreach (var item in Model)
    {
        <div class="chapter-item">
            <a href="@Url.Action("ReadChapter", new { chapterId = item.Id })">
                <div class="chapter-info">
                    <h3>@item.ChapterTitle</h3>
                </div>
                <div class="chapter-overlay">
                </div>
            </a>
            @if (User.Identity!.IsAuthenticated && User.IsInRole("Admin"))
            {
                <form asp-action="DeleteChapter" asp-route-id="@item.Id" method="post" class="delete-form">
                    <button type="submit" class="delete-button">Delete</button>
                </form>
            }
        </div>
    }
</div>




@{
    int currentPage = ViewBag.PageNumber;
    int totalPages = ViewBag.TotalPages;

}

<p>
    Page: @(ViewBag.PageNumber+1)</>


    <div class="pagination button-container">
        @if (currentPage > 0)
        {
            <a href="@Url.Action("ChapterCatalog", new { page = 0, pageSize = ViewBag.PageSize, NovelId = ViewContext.HttpContext.Request.Query["NovelId"] })" class="button">&laquo; First</a>
            <a href="@Url.Action("ChapterCatalog", new { page = currentPage - 1, pageSize = ViewBag.PageSize, NovelId = ViewContext.HttpContext.Request.Query["NovelId"] })" class="button">&lt; Previous</a>
        }

        @for (int i = 0; i < totalPages; i++)
        {
            if (i == currentPage)
            {
                <span class="current button">@(i+1)</span>
            }
            else
            {
                <a href="@Url.Action("ChapterCatalog", new { page = i, pageSize = ViewBag.PageSize })" class="button">@(i+1)</a>
            }
        }

        @if (currentPage < totalPages)
        {
            <a href="@Url.Action("ChapterCatalog", new { page = currentPage + 1, pageSize = ViewBag.PageSize, NovelId = ViewContext.HttpContext.Request.Query["NovelId"] })" class="button">Next &gt;</a>
            <a href="@Url.Action("ChapterCatalog", new { page = totalPages, pageSize = ViewBag.PageSize, NovelId = ViewContext.HttpContext.Request.Query["NovelId"] })" class="button">Last &raquo;</a>
        }
    </div>

    <style>
        .chapter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            grid-gap: 1px;
            width: 30%;
            cursor: pointer; /* Indicate clickable element */
            transition: background-color 0.3s ease; /* Transition for hover effect */
        }

            .chapter-grid:hover {
                background-color: black; /* Background color on hover */
                color: white; /* Text color on hover */
                border-color: grey; /* Adjust border color on hover (optional) */
            }

        .chapter-item {
            background-color: transparent;
            border: 0.25px solid #ddd; /* Border width halved */
            padding: 5px;
            position: relative; /* For hover effects */
            transition: background-color 0.2s ease;
        }

        .chapter-title {
            text-align: center; /* Center chapter titles */
        }

        .chapter-grid a {
            text-decoration: none; /* Remove underline */
            color: white;
        }

            .chapter-grid a h3 {
                color: white;
            }

        .chapter-item:hover {
            background-color: black; /* Darken on hover */
        }

        .delete-form {
            position: absolute;
            top: 5px;
            right: 5px;
            display: none; /* Hide form initially */
        }

        .delete-button {
            background-color: transparent;
            border: none;
            color: #FF0000; /* Red for delete action */
            cursor: pointer;
            padding: 5px 10px; /* Adjust padding if needed */
            font-weight: bold; /* Emphasize delete action */
        }

        .chapter-item:hover .delete-form {
            display: block; /* Show form on hover */
        }


        .chapter-info {
            text-align: center;
        }

        .chapter-overlay {
            position: absolute; /* Overlap chapter-item content */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%; /* Cover the entire chapter item */
            background-color: rgba(0, 0, 0, 0.3); /* Semi-transparent black overlay */
            opacity: 0; /* Hide initially */
            transition: opacity 0.2s ease;
        }

        .chapter-item:hover .chapter-overlay {
            opacity: 1; /* Reveal overlay on hover */
        }

            .read-more-button:hover {
                background-color: #222; /* Darken button on hover */
            }

        .button-container {
            display: flex; /* Enable flexbox for positioning */
            justify-content: center; /* Horizontally center elements */
        }

        .button { /* Update the selector if needed */
            text-decoration: none;
            color: grey; /* Set the border and text color */
            background-color: transparent; /* Make background transparent */
            border: 2px solid grey; /* Add a visible border */
            padding: 7px 15px;
            border-radius: 5px;
            transition: background-color 0.3s ease; /* Add a smooth color transition */
        }

            .button:hover {
                background-color: grey; /* Fill background on hover */
                color: white; /* Change text color on hover */
            }

        /* Button styles */
        .btn {
            text-decoration: none; /* Remove underline */
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            background-color: #007bff;
            border-radius: 5px;
        }

            .btn:hover {
                background-color: #0056b3;
            }

            /* Link styles */
            .btn .link {
                text-decoration: none; /* Remove underline */
                color: white;
            }

    </style>
